/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package qkareem;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Properties;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.player.DefaultAudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.source.AudioSourceManagers;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.VoiceChannel;
import net.dv8tion.jda.api.managers.AudioManager;
import qkareem.classes.Command;
import qkareem.commands.PlayCommand;
import qkareem.commands.StopCommand;
import qkareem.listeners.GuildMessageReceivedListener;
import qkareem.listeners.PlayerListener;

public class Bot {

    private JDA client;
    private JDABuilder builder;
    public static QuranMP3 qMp3;

    public static BlockingQueue<AudioTrack> queue;
    public static AudioPlayerManager playerManager;
    public static AudioPlayer player;

    public static String prefix;
    private static String token;
    public static ArrayList<Command> commands = new ArrayList<Command>();

    public static void main(String[] args) throws Exception {
        loadProps();
        new Bot();
        Bot.registerCommand(new PlayCommand());
        Bot.registerCommand(new StopCommand());
    }

    private Bot() throws Exception {
        init();
        builder = JDABuilder.createDefault(token);

        builder.setActivity(Activity.watching("the moon"));
        builder.addEventListeners(new GuildMessageReceivedListener());

        client = builder.build();
        client.awaitReady();
    }

    private void init() throws Exception {
        qMp3 = new QuranMP3();
        queue = new LinkedBlockingQueue<>();
        playerManager = new DefaultAudioPlayerManager();
        player = playerManager.createPlayer();

        player.addListener(new PlayerListener());
        AudioSourceManagers.registerRemoteSources(playerManager);
    }

    private static void loadProps() throws Exception {
        FileInputStream configFile = new FileInputStream("config.txt");
        Properties props = new Properties(System.getProperties());
        props.load(configFile);
        System.setProperties(props);
        prefix = System.getProperty("prefix");
        token = System.getProperty("token");
    }

    public static void queue(AudioTrack track) {
        if (!player.startTrack(track, true)) {
            queue.offer(track);
        }
    }

    public static void play(Guild guild, AudioTrack track) {
        connectToFirstVoiceChannel(guild.getAudioManager());

        queue(track);
    }

    public static void registerCommand(Command command) {
        commands.add(command);
    }

    public static void connectToFirstVoiceChannel(AudioManager audioManager) {
        if (!audioManager.isConnected()) {
            for (VoiceChannel voiceChannel : audioManager.getGuild().getVoiceChannels()) {
                audioManager.openAudioConnection(voiceChannel);
                break;
            }
        }
    }
}
